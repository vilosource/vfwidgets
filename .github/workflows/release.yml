name: Release Widget

on:
  workflow_dispatch:
    inputs:
      widget_name:
        description: 'Widget to release (e.g., button_widget)'
        required: true
        type: string
      version_bump:
        description: 'Version bump type'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
      publish_to_pypi:
        description: 'Publish to PyPI'
        required: true
        type: boolean
        default: false

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write  # For PyPI trusted publishing

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine bump2version

    - name: Validate widget exists
      run: |
        if [ ! -d "widgets/${{ github.event.inputs.widget_name }}" ]; then
          echo "Widget ${{ github.event.inputs.widget_name }} does not exist!"
          exit 1
        fi

    - name: Get current version
      id: current_version
      run: |
        cd widgets/${{ github.event.inputs.widget_name }}
        VERSION=$(grep "^version = " pyproject.toml | cut -d'"' -f2)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Current version: $VERSION"

    - name: Bump version
      id: new_version
      run: |
        cd widgets/${{ github.event.inputs.widget_name }}

        # Calculate new version
        IFS='.' read -r major minor patch <<< "${{ steps.current_version.outputs.version }}"

        case "${{ github.event.inputs.version_bump }}" in
          major)
            major=$((major + 1))
            minor=0
            patch=0
            ;;
          minor)
            minor=$((minor + 1))
            patch=0
            ;;
          patch)
            patch=$((patch + 1))
            ;;
        esac

        NEW_VERSION="${major}.${minor}.${patch}"
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "New version: $NEW_VERSION"

        # Update version in pyproject.toml
        sed -i "s/^version = .*/version = \"$NEW_VERSION\"/" pyproject.toml

        # Update version in __init__.py if it exists
        if [ -f "src/vfwidgets_*//__init__.py" ]; then
          sed -i "s/__version__ = .*/__version__ = \"$NEW_VERSION\"/" src/vfwidgets_*/__init__.py
        fi

    - name: Run tests
      run: |
        cd widgets/${{ github.event.inputs.widget_name }}
        pip install -e ".[dev]"
        pytest tests/ || echo "No tests found"

    - name: Build package
      run: |
        cd widgets/${{ github.event.inputs.widget_name }}
        python -m build

    - name: Create Git tag
      run: |
        WIDGET_NAME="${{ github.event.inputs.widget_name }}"
        NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
        TAG_NAME="${WIDGET_NAME}-v${NEW_VERSION}"

        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"

        git add .
        git commit -m "Release ${WIDGET_NAME} v${NEW_VERSION}" || echo "No changes to commit"
        git tag -a "$TAG_NAME" -m "Release ${WIDGET_NAME} v${NEW_VERSION}"
        git push origin "$TAG_NAME"

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: "${{ github.event.inputs.widget_name }}-v${{ steps.new_version.outputs.new_version }}"
        name: "${{ github.event.inputs.widget_name }} v${{ steps.new_version.outputs.new_version }}"
        body: |
          ## Release ${{ github.event.inputs.widget_name }} v${{ steps.new_version.outputs.new_version }}

          ### Installation
          ```bash
          pip install vfwidgets-${{ github.event.inputs.widget_name }}==${{ steps.new_version.outputs.new_version }}
          ```

          ### Changes
          - Version bump: ${{ github.event.inputs.version_bump }}

        files: |
          widgets/${{ github.event.inputs.widget_name }}/dist/*

    - name: Publish to PyPI
      if: github.event.inputs.publish_to_pypi == 'true'
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        packages-dir: widgets/${{ github.event.inputs.widget_name }}/dist/
        skip-existing: true