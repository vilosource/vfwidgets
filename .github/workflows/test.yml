name: Test Widgets

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libxcb-xinerama0 \
          libxcb-icccm4 \
          libxcb-image0 \
          libxcb-keysyms1 \
          libxcb-randr0 \
          libxcb-render-util0 \
          libxcb-xfixes0 \
          libxkbcommon-x11-0 \
          libxcb-cursor0 \
          xvfb

    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install development tools
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-qt pytest-cov black ruff mypy

    - name: Install shared utilities
      run: |
        if [ -d "shared/vfwidgets_common" ]; then
          pip install -e shared/vfwidgets_common
        fi
      shell: bash

    - name: Test individual widgets
      run: |
        for widget_dir in widgets/*/; do
          if [ -f "${widget_dir}pyproject.toml" ]; then
            echo "Testing ${widget_dir}..."
            pip install -e "${widget_dir}[dev]"

            # Run tests
            if [ -d "${widget_dir}tests" ]; then
              if [ "${{ runner.os }}" == "Linux" ]; then
                xvfb-run -a pytest "${widget_dir}tests" --cov --cov-report=term-missing
              else
                pytest "${widget_dir}tests" --cov --cov-report=term-missing
              fi
            fi

            # Run linting
            ruff check "${widget_dir}src"

            # Run formatting check
            black --check "${widget_dir}src"

            # Run type checking
            mypy "${widget_dir}src" --ignore-missing-imports || true
          fi
        done
      shell: bash

    - name: Upload coverage reports
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v4
      with:
        files: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false