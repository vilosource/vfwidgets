[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "vfwidgets-theme-system"
version = "1.0.0"
description = "Comprehensive theme management system for PySide6/Qt applications with VSCode theme compatibility"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [
    {name = "VFWidgets Team", email = "team@vfwidgets.org"}
]
maintainers = [
    {name = "VFWidgets Team", email = "team@vfwidgets.org"}
]
keywords = [
    "pyside6",
    "qt",
    "theme",
    "theming",
    "gui",
    "widget",
    "vscode",
    "dark-mode",
    "light-mode",
    "customization"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: User Interfaces",
    "Framework :: PySide6",
    "Operating System :: OS Independent"
]

dependencies = [
    "PySide6>=6.5.0",
    "typing-extensions>=4.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-qt>=4.0",
    "pytest-cov>=4.0",
    "black>=23.0",
    "ruff>=0.1.0",
    "mypy>=1.0",
    "types-PySide6>=6.0",
    "sphinx>=5.0",
    "sphinx-rtd-theme>=1.0"
]

test = [
    "pytest>=7.0",
    "pytest-qt>=4.0",
    "pytest-cov>=4.0",
]

docs = [
    "sphinx>=5.0",
    "sphinx-rtd-theme>=1.0",
    "myst-parser>=1.0"
]

[project.urls]
Homepage = "https://github.com/vfwidgets/theme-system"
Documentation = "https://vfwidgets.org/docs/theme-system"
Repository = "https://github.com/vfwidgets/theme-system"
Issues = "https://github.com/vfwidgets/theme-system/issues"
Discord = "https://discord.gg/vfwidgets"

[tool.setuptools]
include-package-data = true

[tool.setuptools.packages.find]
where = ["src"]
include = ["vfwidgets_theme*"]
exclude = ["tests*", "docs*", "examples*"]

[tool.setuptools.package-data]
vfwidgets_theme = [
    "py.typed",
    "themes/*.json",
    "schemas/*.json",
    "resources/icons/*.svg",
    "resources/styles/*.qss"
]

[tool.pyside6-project]
files = [
    "src/vfwidgets_theme/*.py",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
addopts = [
    "--verbose",
    "--cov=vfwidgets_theme",
    "--cov-report=html",
    "--cov-report=term-missing"
]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_unimported = false
no_implicit_optional = true
check_untyped_defs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.ruff]
target-version = "py39"
line-length = 100
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "D",   # pydocstyle
]
ignore = [
    "D100",  # Missing docstring in public module
    "D104",  # Missing docstring in public package
    "D107",  # Missing docstring in __init__
    "D203",  # 1 blank line required before class docstring
    "D213",  # Multi-line docstring summary should start at the second line
]

[tool.ruff.per-file-ignores]
"tests/*" = ["D"]
"examples/*" = ["D"]

[tool.black]
line-length = 100
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.coverage.run]
source = ["src/vfwidgets_theme"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/examples/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
]