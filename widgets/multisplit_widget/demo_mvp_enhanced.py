#!/usr/bin/env python3
"""
Enhanced MultiSplit Widget MVP Demo

Demonstrates all features with real widgets and visible splits:
- QPlainTextEdit for code editors with syntax highlighting
- QTextBrowser for preview panes
- Terminal-like widgets with proper styling
- Clear visual separation between panes

Run with debug logging:
    python demo_mvp_enhanced.py --debug
"""

import argparse
import random
import sys
from pathlib import Path

from PySide6.QtCore import Qt, QTimer
from PySide6.QtGui import (
    QAction,
    QColor,
    QFont,
    QKeySequence,
    QSyntaxHighlighter,
    QTextCharFormat,
)
from PySide6.QtWidgets import (
    QApplication,
    QFileDialog,
    QLabel,
    QMainWindow,
    QMessageBox,
    QPlainTextEdit,
    QStatusBar,
    QTextBrowser,
    QToolBar,
    QTreeWidget,
    QTreeWidgetItem,
    QWidget,
)

# Add src to path
src_path = Path(__file__).parent / "src"
sys.path.insert(0, str(src_path))

from vfwidgets_multisplit import MultisplitWidget
from vfwidgets_multisplit.core.logger import logger, setup_logging
from vfwidgets_multisplit.core.types import PaneId, WherePosition, WidgetId
from vfwidgets_multisplit.view.container import WidgetProvider


class PythonHighlighter(QSyntaxHighlighter):
    """Simple Python syntax highlighter."""

    def __init__(self, document):
        super().__init__(document)

        # Define highlighting rules
        self.highlighting_rules = []

        # Keywords - bright blue
        keyword_format = QTextCharFormat()
        keyword_format.setForeground(QColor(86, 156, 214))  # VSCode blue
        keyword_format.setFontWeight(QFont.Weight.Bold)
        keywords = [
            'def', 'class', 'import', 'from', 'as', 'if', 'elif', 'else',
            'for', 'while', 'return', 'yield', 'lambda', 'with', 'try',
            'except', 'finally', 'raise', 'assert', 'break', 'continue',
            'pass', 'del', 'is', 'not', 'in', 'and', 'or', 'True', 'False', 'None'
        ]
        for keyword in keywords:
            self.highlighting_rules.append((f'\\b{keyword}\\b', keyword_format))

        # Strings - orange
        string_format = QTextCharFormat()
        string_format.setForeground(QColor(206, 145, 120))  # VSCode orange
        self.highlighting_rules.append(('"[^"]*"', string_format))
        self.highlighting_rules.append(("'[^']*'", string_format))

        # Comments - green
        comment_format = QTextCharFormat()
        comment_format.setForeground(QColor(106, 153, 85))  # VSCode green
        comment_format.setFontItalic(True)
        self.highlighting_rules.append(('#[^\n]*', comment_format))

        # Functions - yellow
        function_format = QTextCharFormat()
        function_format.setForeground(QColor(220, 220, 170))  # VSCode yellow
        self.highlighting_rules.append(('\\b[A-Za-z_][A-Za-z0-9_]*(?=\\()', function_format))

    def highlightBlock(self, text):
        """Apply syntax highlighting to a block of text."""
        import re
        for pattern, text_format in self.highlighting_rules:
            for match in re.finditer(pattern, text):
                self.setFormat(match.start(), match.end() - match.start(), text_format)


class CodeEditor(QPlainTextEdit):
    """Enhanced code editor with line numbers and syntax highlighting."""

    def __init__(self, filename="untitled.py", content=None):
        super().__init__()

        # Set editor properties
        font = QFont("Courier New", 11)
        font.setStyleHint(QFont.StyleHint.Monospace)
        self.setFont(font)

        # Set tab width
        self.setTabStopDistance(self.fontMetrics().horizontalAdvance(' ') * 4)

        # Add syntax highlighting
        self.highlighter = PythonHighlighter(self.document())

        # Set initial content
        if content:
            self.setPlainText(content)
        else:
            self.setPlainText(f'''#!/usr/bin/env python3
"""
{filename}
Generated by MultiSplit Demo
"""

def main():
    """Main function."""
    print("Hello from {filename}")

    # Example code
    for i in range(10):
        if i % 2 == 0:
            print(f"Even: {{i}}")
        else:
            print(f"Odd: {{i}}")

if __name__ == "__main__":
    main()
''')

        # Style the editor with visible colors
        self.setStyleSheet("""
            QPlainTextEdit {
                background-color: #1e1e1e;
                color: #d4d4d4;
                border: 1px solid #3c3f41;
                padding: 8px;
                font-family: 'Courier New', 'Consolas', monospace;
                font-size: 11pt;
                selection-background-color: #264f78;
            }
        """)


class Terminal(QPlainTextEdit):
    """Terminal-like widget."""

    def __init__(self, session_id="1"):
        super().__init__()

        # Set terminal properties
        font = QFont("Consolas", 10)
        font.setStyleHint(QFont.StyleHint.Monospace)
        self.setFont(font)

        # Terminal styling
        self.setStyleSheet("""
            QPlainTextEdit {
                background-color: #0c0c0c;
                color: #00ff00;
                border: none;
                padding: 5px;
            }
        """)

        # Initial content
        self.setPlainText(f"""[Session {session_id}] Python 3.10.0
Type "help", "copyright", "credits" or "license" for more information.
>>> import multisplit
>>> widget = multisplit.MultisplitWidget()
>>> widget.split_pane('pane_1', 'editor:test.py', 'right')
True
>>> widget.get_pane_ids()
['pane_1', 'pane_2']
>>> # Terminal session {session_id} ready
>>> _
""")


class FileExplorer(QTreeWidget):
    """File explorer widget."""

    def __init__(self):
        super().__init__()

        self.setHeaderLabel("Project Files")

        # Create sample file tree
        root = QTreeWidgetItem(self, ["multisplit_widget/"])

        src = QTreeWidgetItem(root, ["src/"])
        QTreeWidgetItem(src, ["__init__.py"])
        QTreeWidgetItem(src, ["multisplit.py"])

        core = QTreeWidgetItem(src, ["core/"])
        QTreeWidgetItem(core, ["model.py"])
        QTreeWidgetItem(core, ["nodes.py"])
        QTreeWidgetItem(core, ["types.py"])

        view = QTreeWidgetItem(src, ["view/"])
        QTreeWidgetItem(view, ["container.py"])
        QTreeWidgetItem(view, ["error_widget.py"])

        tests = QTreeWidgetItem(root, ["tests/"])
        QTreeWidgetItem(tests, ["test_model.py"])
        QTreeWidgetItem(tests, ["test_commands.py"])
        QTreeWidgetItem(tests, ["test_focus.py"])

        docs = QTreeWidgetItem(root, ["docs/"])
        QTreeWidgetItem(docs, ["README.md"])
        QTreeWidgetItem(docs, ["architecture.md"])

        # Expand some items
        root.setExpanded(True)
        src.setExpanded(True)

        # Style
        self.setStyleSheet("""
            QTreeWidget {
                background-color: #3c3f41;
                color: #a9b7c6;
                border: none;
                padding: 5px;
            }
            QTreeWidget::item:selected {
                background-color: #214283;
            }
        """)


class Preview(QTextBrowser):
    """Preview/documentation widget."""

    def __init__(self, title="Preview"):
        super().__init__()

        # Set content
        self.setHtml(f"""
        <html>
        <head>
            <style>
                body {{
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                    padding: 20px;
                    background-color: #fafafa;
                    color: #333;
                }}
                h1 {{ color: #2c3e50; }}
                h2 {{ color: #34495e; }}
                code {{
                    background-color: #f4f4f4;
                    padding: 2px 4px;
                    border-radius: 3px;
                    font-family: 'Courier New', monospace;
                }}
                pre {{
                    background-color: #f4f4f4;
                    padding: 10px;
                    border-radius: 5px;
                    overflow-x: auto;
                }}
                .feature {{
                    margin: 10px 0;
                    padding: 10px;
                    background: white;
                    border-left: 4px solid #3498db;
                }}
            </style>
        </head>
        <body>
            <h1>{title}</h1>
            <p>This is a preview pane demonstrating the MultiSplit widget capabilities.</p>

            <h2>Features</h2>
            <div class="feature">
                <strong>Dynamic Splitting</strong><br>
                Split panes in any direction using the toolbar or keyboard shortcuts.
            </div>

            <div class="feature">
                <strong>Focus Management</strong><br>
                Navigate between panes using <code>Tab</code> or <code>Alt+Arrow</code> keys.
                Focused panes show a blue border.
            </div>

            <div class="feature">
                <strong>Resizable Panes</strong><br>
                Drag the dividers between panes to resize them. Hover over dividers
                to see visual feedback.
            </div>

            <div class="feature">
                <strong>Undo/Redo</strong><br>
                Use <code>Ctrl+Z</code> and <code>Ctrl+Y</code> to undo/redo operations.
            </div>

            <h2>Code Example</h2>
            <pre><code>from vfwidgets_multisplit import MultisplitWidget

# Create widget
widget = MultisplitWidget()

# Split horizontally
widget.split_pane(pane_id, "editor:main.py", WherePosition.RIGHT)

# Split vertically
widget.split_pane(pane_id, "terminal:1", WherePosition.BOTTOM)</code></pre>

            <p><em>Pane ID: {random.randint(1000, 9999)}</em></p>
        </body>
        </html>
        """)

        # Style
        self.setStyleSheet("""
            QTextBrowser {
                border: none;
            }
        """)


class OutputPanel(QPlainTextEdit):
    """Output/console panel."""

    def __init__(self):
        super().__init__()

        self.setReadOnly(True)

        # Style like console output
        font = QFont("Courier New", 9)
        self.setFont(font)

        self.setStyleSheet("""
            QPlainTextEdit {
                background-color: #2b2b2b;
                color: #a9b7c6;
                border: none;
                padding: 5px;
            }
        """)

        # Sample output
        self.setPlainText("""[Build Output]
========================================
Building project...
✓ Phase 0: Foundations complete (38 tests)
✓ Phase 1: Working core complete (39 tests)
✓ Phase 2: Interactions complete (12 tests)
✓ Phase 3: Polish complete (26 tests)

Running tests...
======================== 115 passed in 0.22s ========================

Build successful!
Total tests: 115
Passed: 115
Failed: 0

Ready for deployment.
========================================
""")


class EnhancedWidgetProvider(WidgetProvider):
    """Enhanced widget provider with real Qt widgets."""

    def __init__(self):
        """Initialize provider."""
        self.widget_count = 0
        self.editor_count = 0
        self.terminal_count = 0

    def provide_widget(self, widget_id: WidgetId, pane_id: PaneId) -> QWidget:
        """Provide a widget based on the widget_id."""
        widget_str = str(widget_id)
        logger.info(f"Provider: Creating widget '{widget_str}' for pane {pane_id}")

        if widget_str.startswith("editor:"):
            # Create code editor
            self.editor_count += 1
            filename = widget_str.split(":", 1)[1]
            editor = CodeEditor(filename)
            return editor

        elif widget_str.startswith("terminal:"):
            # Create terminal
            self.terminal_count += 1
            session_id = widget_str.split(":", 1)[1]
            return Terminal(session_id)

        elif widget_str.startswith("preview:"):
            # Create preview pane
            title = widget_str.split(":", 1)[1]
            return Preview(title)

        elif widget_str.startswith("explorer:"):
            # Create file explorer
            return FileExplorer()

        elif widget_str.startswith("output:"):
            # Create output panel
            return OutputPanel()

        else:
            # Default widget with clear visibility
            self.widget_count += 1
            widget = QLabel(f"""
                <div style='padding: 20px; text-align: center;'>
                    <h2>Pane {self.widget_count}</h2>
                    <p>Widget ID: {widget_id}</p>
                    <p>Pane ID: {pane_id}</p>
                    <p style='color: #888;'>Use the toolbar to split this pane</p>
                </div>
            """)
            widget.setAlignment(Qt.AlignmentFlag.AlignCenter)
            widget.setStyleSheet("""
                QLabel {
                    background-color: #f0f0f0;
                    border: 2px dashed #ccc;
                    color: #333;
                }
            """)
            return widget


class EnhancedDemoWindow(QMainWindow):
    """Enhanced demo window with better visuals."""

    def __init__(self):
        """Initialize demo window."""
        super().__init__()

        self.setWindowTitle("MultiSplit Widget - Enhanced Demo")
        self.setGeometry(100, 100, 1400, 900)

        # Set dark theme
        self.setStyleSheet("""
            QMainWindow {
                background-color: #2b2b2b;
            }
            QToolBar {
                background-color: #3c3f41;
                border: none;
                spacing: 3px;
                padding: 5px;
            }
            QToolBar QToolButton {
                background-color: #3c3f41;
                border: 1px solid #555;
                border-radius: 3px;
                padding: 5px 10px;
                color: #a9b7c6;
                margin: 2px;
            }
            QToolBar QToolButton:hover {
                background-color: #4a4a4a;
                border-color: #6a6a6a;
            }
            QToolBar QToolButton:pressed {
                background-color: #555;
            }
            QStatusBar {
                background-color: #3c3f41;
                color: #a9b7c6;
            }
            QMenuBar {
                background-color: #3c3f41;
                color: #a9b7c6;
            }
            QMenuBar::item:selected {
                background-color: #4a4a4a;
            }
            QMenu {
                background-color: #3c3f41;
                color: #a9b7c6;
            }
            QMenu::item:selected {
                background-color: #214283;
            }
        """)

        # Create widget provider
        self.provider = EnhancedWidgetProvider()

        # Create MultiSplit widget
        self.multisplit = MultisplitWidget(provider=self.provider)
        self.setCentralWidget(self.multisplit)

        # Initialize with IDE-like layout
        self.setup_initial_layout()

        # Setup UI
        self.setup_toolbar()
        self.setup_menubar()
        self.setup_statusbar()

        # Connect signals
        self.connect_signals()

        # Show initial status
        self.update_status()

    def setup_initial_layout(self):
        """Set up initial IDE-like layout."""
        # Start with main editor
        self.multisplit.initialize_empty("editor:main.py")

        # Get the initial pane
        panes = self.multisplit.get_pane_ids()
        if panes:
            main_pane = panes[0]

            # Add file explorer on the left (narrower)
            self.multisplit.split_pane(main_pane, "explorer:files", WherePosition.LEFT, 0.2)

            # Add terminal at bottom
            self.multisplit.split_pane(main_pane, "terminal:1", WherePosition.BOTTOM, 0.7)

            # Add output panel next to terminal
            terminal_pane = self.multisplit.get_pane_ids()[-1]
            self.multisplit.split_pane(terminal_pane, "output:build", WherePosition.RIGHT, 0.5)

    def setup_toolbar(self):
        """Set up enhanced toolbar."""
        toolbar = QToolBar("Main")
        toolbar.setMovable(False)
        self.addToolBar(toolbar)

        # File operations
        new_editor = QAction("📝 New Editor", self)
        new_editor.triggered.connect(lambda: self.add_widget("editor:untitled.py"))
        toolbar.addAction(new_editor)

        toolbar.addSeparator()

        # Split operations with better labels
        split_h = QAction("⬌ Split Horizontal", self)
        split_h.setToolTip("Split current pane horizontally (Alt+H)")
        split_h.triggered.connect(lambda: self.split_current(WherePosition.RIGHT))
        toolbar.addAction(split_h)

        split_v = QAction("⬍ Split Vertical", self)
        split_v.setToolTip("Split current pane vertically (Alt+V)")
        split_v.triggered.connect(lambda: self.split_current(WherePosition.BOTTOM))
        toolbar.addAction(split_v)

        toolbar.addSeparator()

        # Add specific widgets
        add_terminal = QAction("💻 Add Terminal", self)
        add_terminal.triggered.connect(lambda: self.add_widget("terminal:new"))
        toolbar.addAction(add_terminal)

        add_preview = QAction("👁 Add Preview", self)
        add_preview.triggered.connect(lambda: self.add_widget("preview:Documentation"))
        toolbar.addAction(add_preview)

        toolbar.addSeparator()

        # Pane operations
        remove = QAction("✖ Close Pane", self)
        remove.setShortcut(QKeySequence("Ctrl+W"))
        remove.setToolTip("Close current pane (Ctrl+W)")
        remove.triggered.connect(self.remove_current)
        toolbar.addAction(remove)

        toolbar.addSeparator()

        # Undo/Redo with icons
        undo = QAction("↶ Undo", self)
        undo.setShortcut(QKeySequence.StandardKey.Undo)
        undo.setToolTip("Undo last action (Ctrl+Z)")
        undo.triggered.connect(self.multisplit.undo)
        toolbar.addAction(undo)

        redo = QAction("↷ Redo", self)
        redo.setShortcut(QKeySequence.StandardKey.Redo)
        redo.setToolTip("Redo last undone action (Ctrl+Y)")
        redo.triggered.connect(self.multisplit.redo)
        toolbar.addAction(redo)

        toolbar.addSeparator()

        # Layout operations
        save = QAction("💾 Save Layout", self)
        save.setToolTip("Save current layout to file")
        save.triggered.connect(self.save_layout)
        toolbar.addAction(save)

        load = QAction("📂 Load Layout", self)
        load.setToolTip("Load layout from file")
        load.triggered.connect(self.load_layout)
        toolbar.addAction(load)

        toolbar.addSeparator()

        # Reset layout
        reset = QAction("🔄 Reset Layout", self)
        reset.setToolTip("Reset to default layout")
        reset.triggered.connect(self.reset_layout)
        toolbar.addAction(reset)

    def setup_menubar(self):
        """Set up menu bar."""
        menubar = self.menuBar()

        # File menu
        file_menu = menubar.addMenu("&File")

        new_action = QAction("&New Editor\tCtrl+N", self)
        new_action.triggered.connect(lambda: self.add_widget("editor:new.py"))
        file_menu.addAction(new_action)

        file_menu.addSeparator()

        save_layout = QAction("&Save Layout\tCtrl+S", self)
        save_layout.triggered.connect(self.save_layout)
        file_menu.addAction(save_layout)

        load_layout = QAction("&Load Layout\tCtrl+O", self)
        load_layout.triggered.connect(self.load_layout)
        file_menu.addAction(load_layout)

        file_menu.addSeparator()

        quit_action = QAction("&Quit\tCtrl+Q", self)
        quit_action.triggered.connect(self.close)
        file_menu.addAction(quit_action)

        # View menu
        view_menu = menubar.addMenu("&View")

        # Layouts submenu
        layout_menu = view_menu.addMenu("Layouts")

        ide_layout = QAction("IDE Layout", self)
        ide_layout.triggered.connect(self.apply_ide_layout)
        layout_menu.addAction(ide_layout)

        simple_layout = QAction("Simple Layout", self)
        simple_layout.triggered.connect(self.apply_simple_layout)
        layout_menu.addAction(simple_layout)

        # Help menu
        help_menu = menubar.addMenu("&Help")

        shortcuts = QAction("&Keyboard Shortcuts", self)
        shortcuts.triggered.connect(self.show_shortcuts)
        help_menu.addAction(shortcuts)

        about = QAction("&About", self)
        about.triggered.connect(self.show_about)
        help_menu.addAction(about)

    def setup_statusbar(self):
        """Set up status bar."""
        self.statusbar = QStatusBar()
        self.setStatusBar(self.statusbar)

        # Pane count
        self.pane_label = QLabel("Panes: 0")
        self.statusbar.addWidget(self.pane_label)

        # Separator
        self.statusbar.addWidget(QLabel(" | "))

        # Focus indicator
        self.focus_label = QLabel("Focus: None")
        self.statusbar.addWidget(self.focus_label)

        # Separator
        self.statusbar.addWidget(QLabel(" | "))

        # Widget counts
        self.widget_label = QLabel("Widgets: 0")
        self.statusbar.addWidget(self.widget_label)

        # Spacer
        self.statusbar.addPermanentWidget(QLabel(""))

        # Undo/redo status
        self.undo_label = QLabel("")
        self.statusbar.addPermanentWidget(self.undo_label)

    def connect_signals(self):
        """Connect MultiSplit signals."""
        self.multisplit.pane_added.connect(self.on_pane_added)
        self.multisplit.pane_removed.connect(self.on_pane_removed)
        self.multisplit.pane_focused.connect(self.on_pane_focused)
        self.multisplit.validation_failed.connect(self.on_validation_failed)
        self.multisplit.layout_changed.connect(self.update_status)

    def split_current(self, position: WherePosition):
        """Split current pane."""
        current = self.multisplit.get_focused_pane()
        if not current:
            panes = self.multisplit.get_pane_ids()
            if panes:
                current = panes[0]

        if current:
            # Choose widget type based on position
            if position in (WherePosition.LEFT, WherePosition.RIGHT):
                widget_id = f"editor:split_{self.provider.editor_count + 1}.py"
            else:
                widget_id = f"terminal:{self.provider.terminal_count + 1}"

            self.multisplit.split_pane(current, widget_id, position, 0.5)

    def add_widget(self, widget_type: str):
        """Add widget of specific type."""
        current = self.multisplit.get_focused_pane()
        if current:
            self.multisplit.split_pane(current, widget_type, WherePosition.RIGHT, 0.5)

    def remove_current(self):
        """Remove current pane."""
        current = self.multisplit.get_focused_pane()
        if current and len(self.multisplit.get_pane_ids()) > 1:
            self.multisplit.remove_pane(current)

    def save_layout(self):
        """Save layout to file."""
        filepath, _ = QFileDialog.getSaveFileName(
            self, "Save Layout", "layout.json", "JSON Files (*.json)"
        )
        if filepath:
            if self.multisplit.save_layout(Path(filepath)):
                self.statusbar.showMessage("Layout saved", 3000)

    def load_layout(self):
        """Load layout from file."""
        filepath, _ = QFileDialog.getOpenFileName(
            self, "Load Layout", "", "JSON Files (*.json)"
        )
        if filepath:
            if self.multisplit.load_layout(Path(filepath)):
                self.statusbar.showMessage("Layout loaded", 3000)

    def reset_layout(self):
        """Reset to initial layout."""
        # Clear and reinitialize
        self.multisplit.initialize_empty("editor:main.py")
        self.setup_initial_layout()

    def apply_ide_layout(self):
        """Apply IDE-like layout."""
        self.reset_layout()

    def apply_simple_layout(self):
        """Apply simple layout."""
        self.multisplit.initialize_empty("editor:simple.py")
        panes = self.multisplit.get_pane_ids()
        if panes:
            self.multisplit.split_pane(panes[0], "terminal:1", WherePosition.BOTTOM, 0.7)

    def update_status(self):
        """Update status bar."""
        # Pane count
        panes = self.multisplit.get_pane_ids()
        self.pane_label.setText(f"Panes: {len(panes)}")

        # Widget count
        (self.provider.editor_count +
                        self.provider.terminal_count +
                        self.provider.widget_count)
        self.widget_label.setText(f"Editors: {self.provider.editor_count}, "
                                 f"Terminals: {self.provider.terminal_count}")

        # Undo/redo
        undo_text = "↶" if self.multisplit.can_undo() else ""
        redo_text = "↷" if self.multisplit.can_redo() else ""
        status = f"{undo_text} {redo_text}".strip()
        self.undo_label.setText(status if status else "No history")

    def on_pane_added(self, pane_id: str):
        """Handle pane addition."""
        self.statusbar.showMessage("Pane added", 2000)

    def on_pane_removed(self, pane_id: str):
        """Handle pane removal."""
        self.statusbar.showMessage("Pane removed", 2000)

    def on_pane_focused(self, pane_id: str):
        """Handle focus change."""
        short_id = pane_id[:10] + "..." if len(pane_id) > 10 else pane_id
        self.focus_label.setText(f"Focus: {short_id}")

    def on_validation_failed(self, errors: list):
        """Handle validation errors."""
        if errors:
            self.statusbar.showMessage(f"Error: {errors[0]}", 3000)

    def show_shortcuts(self):
        """Show keyboard shortcuts."""
        QMessageBox.information(self, "Keyboard Shortcuts", """
            <h3>Navigation</h3>
            <b>Tab</b> - Next pane<br>
            <b>Shift+Tab</b> - Previous pane<br>
            <b>Alt+Arrow</b> - Move focus in direction<br>

            <h3>Pane Operations</h3>
            <b>Ctrl+W</b> - Close current pane<br>
            <b>Alt+H</b> - Split horizontally<br>
            <b>Alt+V</b> - Split vertically<br>

            <h3>History</h3>
            <b>Ctrl+Z</b> - Undo<br>
            <b>Ctrl+Y</b> - Redo<br>

            <h3>Layout</h3>
            <b>Ctrl+S</b> - Save layout<br>
            <b>Ctrl+O</b> - Load layout
        """)

    def show_about(self):
        """Show about dialog."""
        QMessageBox.about(self, "About", """
            <h2>MultiSplit Widget Demo</h2>
            <p>Enhanced demonstration with real widgets</p>
            <p><b>Version:</b> MVP Complete</p>
            <p><b>Tests:</b> 115 passing</p>
            <p><b>Architecture:</b> Strict MVC</p>
        """)


def main():
    """Run enhanced demo."""
    # Parse command line arguments
    parser = argparse.ArgumentParser(description="MultiSplit Widget Demo")
    parser.add_argument("--debug", action="store_true",
                      help="Enable detailed debug logging")
    parser.add_argument("--log-file", type=str,
                      help="Log to file (e.g., debug.log)")
    parser.add_argument("--log-level", type=str, default="INFO",
                      choices=["DEBUG", "INFO", "WARNING", "ERROR"],
                      help="Set logging level")
    args = parser.parse_args()

    # Configure logging
    if args.debug:
        log_level = "DEBUG"
        print("Debug mode enabled - detailed logging active")
    else:
        log_level = args.log_level

    log_file = Path(args.log_file) if args.log_file else None

    # Setup logging
    setup_logging(
        level=log_level,
        log_file=log_file,
        console=True,
        detailed=args.debug
    )

    logger.info("=" * 60)
    logger.info("MultiSplit Widget Demo Starting")
    logger.info(f"Logging level: {log_level}")
    if log_file:
        logger.info(f"Logging to file: {log_file}")
    logger.info("=" * 60)

    # Create Qt application
    app = QApplication(sys.argv)

    # Set application style
    app.setStyle("Fusion")

    # Create and show window
    window = EnhancedDemoWindow()
    window.show()

    # Welcome message
    welcome_msg = "Welcome! Try splitting panes, dragging dividers, or using Tab to navigate"
    if args.debug:
        welcome_msg += " (DEBUG MODE)"

    QTimer.singleShot(500, lambda: window.statusbar.showMessage(welcome_msg, 5000))

    # Log initial state
    logger.info("Demo window created and shown")
    logger.info("Initial layout: File explorer | Editor | Terminal + Output")

    sys.exit(app.exec())


if __name__ == "__main__":
    main()
